<section class="fly-into-view"><slot></slot></section>
<script>
	function triggerChildShowEvents(target: Element, shouldShow: boolean) {
		target.dispatchEvent(new Event(shouldShow ? 'geode-shown' : 'geode-hidden'));
		for (const child of target.children) {
			triggerChildShowEvents(child, shouldShow);
		}
	}
	const observer = new IntersectionObserver(entries => {
		entries.reverse().forEach(entry => {
			const shouldShow = entry.isIntersecting || entry.boundingClientRect.top < (entry.rootBounds?.top ?? 0);
			if (shouldShow) {
				entry.target.classList.toggle('show', shouldShow);
				triggerChildShowEvents(entry.target, shouldShow);
			}
		});
	}, {
		threshold: 0.65
	});
	document.querySelectorAll('.fly-into-view').forEach(section => {
		observer.observe(section);
	});
</script>
<style>
	section {
		display: flex;
		flex-direction: row;
		align-items: center;
		padding-top: 5rem;
		padding-bottom: 5rem;
		gap: 4rem;
		font-size: 1.1em;
        max-width: 70vw;
	}
	section {
		opacity: 0%;
		transform: translateX(-10rem);
		transition-property: transform opacity;
		transition-duration: .6s;
		transition-timing-function: cubic-bezier(0.22, 1, 0.36, 1);
	}
	section:nth-child(even) {
		transform: translateX(10rem);
	}
	section.show {
		transform: translateX(0rem);
		opacity: 100%;
	}
</style>
